from py2neo import Graph, Node, Relationship, NodeMatcher
import pandas as pd
import csv


def getharm():
    harm = ['物理危害', '化学危害', '生物危害']
    harm3 = ['绳索及类似物', '不透气', '填充物', '小零件', '尖角', '锐利边缘', '光滑表面', '粗糙表面', '部件空隙或开口', '机械稳定性', '机械强度', '弹性组件失控',
             '压力空间失控', '移动状态撞击', '旋转部件牵扯', '飞行物体撞击', '移动部件挤压', '爆炸性气体', '爆炸性粉尘', '爆炸性喷雾', '聚合爆炸', '蒸发爆炸', '液体混合爆炸',
             '爆炸性化合物', '固体爆炸性物质', '高/低压', '过热', '漏电', '短路', '过热', '短路', '接触不良', '铁芯发热', '散热不良', '明火', '高温表面', '高温液体',
             '高温气体', '低温表面', '低温液体', '低温气体', '激光辐射', '紫外线辐射', 'X光线辐射', '高频电磁辐射', '低频电磁辐射', '一氧化碳', '一氧化氮', '氯气', '臭氧',
             '氯化氢', '硫化氢', '其它', '砷及其化合物', '镉及其化合物', '铬及其化合物', '铜及其化合物', '汞及其化合物', '镍及其化合物', '铅及其化合物', '其它', '硫酸', '盐酸',
             '氢氧化钠', '其它', '氢氰酸', '氰化钾', '氯化氢', '其它', '甲醛', '乙醛', '丙烯醛', '其它', '蒽类化合物', '菲类化合物', '芘类化合物', '其它',
             'N-杂环化合物', 'S-杂环化合物', 'O-杂环化合物', '其它', '有机氟化物', '有机溴化物', '其它', '大肠杆菌', '沙门氏菌', '副溶血性弧菌', '金黄色葡萄球菌',
             '腊样芽孢肝菌', '其它', '皮肤癣真菌', '着色真菌', '孢子丝菌', '新生隐球菌', '假丝酵母菌', '曲霉', '毛霉', '卡氏肺孢菌', '其它', '甲肝病毒', '甲型流感病毒',
             '轮状病毒', '禽流感病毒', '其它', '尘螨', '蛔虫卵', '绦虫卵', '其它']

    harm0_1 = {'物理危害': ['机械危害', '爆炸危害', '噪声危害', '电气危害', '高/低温物质危害', '辐射危害', '警示标识缺失'], '化学危害': ['无机毒物危害', '有机毒物'],
               '生物危害': ['致病微生物危害', '致病生物危害']}
    harm1_2 = {'机械危害': ['形状和表面性能危害', '潜在能量危害', '动能危害'], '爆炸危害': ['气相爆炸危害', '液相爆炸危害', '固相爆炸危害'],
               '噪声危害': ['稳定性噪音危害', '变动性噪音危害', '脉冲性噪音危害'], '电气危害': ['触电危害', '电气爆炸'], '高/低温物质危害': ['高温物质危害', '低温物质危害'],
               '辐射危害': ['热辐射危害', '射线辐射危害', '电磁辐射危害'], '警示标识缺失': ['警示标识缺失'],
               '无机毒物危害': ['有毒气体危害', '有毒重金属及其化合物危害', '有毒酸碱类危害', '无机氰化物危害'],
               '有机毒物': ['有毒荃类化合物', '有毒芳香稠环类化合物', '有毒杂环类化合物', '有毒有机氯化物'],
               '致病微生物危害': ['原核细胞微生物危害', '真核细胞微生物危害', '原生微生物危害'], '致病生物危害': ['寄生虫危害']}
    harm2_3 = {'形状和表面性能危害': ['绳索及类似物', '不透气', '填充物', '小零件', '尖角', '锐利边缘', '光滑表面', '粗糙表面', '部件空隙或开口'],
               '潜在能量危害': ['机械稳定性', '机械强度', '弹性组件失控', '压力空间失控'], '动能危害': ['移动状态撞击', '旋转部件牵扯', '飞行物体撞击', '移动部件挤压'],
               '气相爆炸危害': ['爆炸性气体', '爆炸性粉尘', '爆炸性喷雾'], '液相爆炸危害': ['聚合爆炸', '蒸发爆炸', '液体混合爆炸'],
               '固相爆炸危害': ['爆炸性化合物', '固体爆炸性物质'], '稳定性噪音危害': ['稳定性噪音危害'], '变动性噪音危害': ['变动性噪音危害'], '脉冲性噪音危害': ['脉冲性噪音危害'],
               '触电危害': ['高/低压', '过热', '漏电', '短路'], '电气爆炸': ['过热', '短路', '接触不良', '铁芯发热', '散热不良'],
               '高温物质危害': ['明火', '高温表面', '高温液体', '高温气体'], '低温物质危害': ['低温表面', '低温液体', '低温气体'], '热辐射危害': ['热辐射危害'],
               '射线辐射危害': ['激光辐射', '紫外线辐射', 'X光线辐射'], '电磁辐射危害': ['高频电磁辐射', '低频电磁辐射'], '警示标识缺失': ['警示标识缺失'],
               '有毒气体危害': ['一氧化碳', '一氧化氮', '氯气', '臭氧', '氯化氢', '硫化氢', '其它'],
               '有毒重金属及其化合物危害': ['砷及其化合物', '镉及其化合物', '铬及其化合物', '铜及其化合物', '汞及其化合物', '镍及其化合物', '铅及其化合物', '其它'],
               '有毒酸碱类危害': ['硫酸', '盐酸', '氢氧化钠', '其它'], '无机氰化物危害': ['氢氰酸', '氰化钾', '氯化氢', '其它'],
               '有毒荃类化合物': ['甲醛', '乙醛', '丙烯醛', '其它'], '有毒芳香稠环类化合物': ['蒽类化合物', '菲类化合物', '芘类化合物', '其它'],
               '有毒杂环类化合物': ['N-杂环化合物', 'S-杂环化合物', 'O-杂环化合物', '其它'], '有毒有机氯化物': ['有机氟化物', '有机氯化物', '有机溴化物', '其它'],
               '原核细胞微生物危害': ['大肠杆菌', '沙门氏菌', '副溶血性弧菌', '金黄色葡萄球菌', '腊样芽孢肝菌', '其它'],
               '真核细胞微生物危害': ['皮肤癣真菌', '着色真菌', '孢子丝菌', '新生隐球菌', '假丝酵母菌', '曲霉', '毛霉', '卡氏肺孢菌', '其它'],
               '原生微生物危害': ['甲肝病毒', '甲型流感病毒', '轮状病毒', '禽流感病毒', '其它'], '寄生虫危害': ['尘螨', '蛔虫卵', '绦虫卵', '其它']}
    p = {'value': '危害类型',
         'label': '危害类型',
         'children': []}
    for i in harm:
        o = {'value': i, 'label': i, 'children': []}
        p['children'].append(o)
    for var in p['children']:
        for q in harm0_1[var['value']]:
            o = {'value': q, 'label': q, 'children': []}
            for j in harm1_2[q]:
                t = {'value': j, 'label': j, 'children': []}
                for l3 in harm2_3[j]:
                    u = {'value': l3, 'label': l3}
                    t['children'].append(u)
                o['children'].append(t)
            var['children'].append(o)
            # print(q)
            # print(var)
    print(p)
    return p


def getconsumer():
    df = pd.read_excel('reldata.xlsx', sheet_name='消费者属性字典表', keep_default_na=False)
    print(df)
    data = df.values.tolist()
    columns = df.columns.values
    for i in range(1, len(data)):
        for k in range(0, len(data[i])):
            if data[i][k] == '':
                data[i][k] = data[i - 1][k]
    p = []
    # for var in data:
    #
    print(data)
    for var in data:
        z = {'value': var[1], 'label': var[1], 'children': []}
        if z not in p:
            p.append(z)
    for var in data:
        z = {'value': var[2], 'label': var[2]}
        for i in p:
            if var[1] == i['value']:
                i['children'].append(z)
    print(p)
    # return o


def getenv():
    df = pd.read_excel('reldata.xlsx', sheet_name='消费品使用环境属性字典表', keep_default_na=False)
    # print(df)
    data = df.values.tolist()
    columns = df.columns.values
    # print(data)
    for i in range(1, len(data)):
        for k in range(0, len(data[i])):
            if data[i][k] == '':
                data[i][k] = data[i - 1][k]
    p = []
    # for i in data:
    #     if i[1] not in p and i[1]:
    #         p.append(i[1])
    # o = {'value': '环境', 'label': '环境', 'children': []}
    # for i in p:
    #     z = {'value': i, 'label': i}
    #     o['children'].append(z)
    for var in data:
        z = {'value': var[1], 'label': var[1], 'children': []}
        if z not in p:
            p.append(z)
    for var in data:
        z = {'value': var[2], 'label': var[2]}
        for i in p:
            if var[1] == i['value']:
                i['children'].append(z)
    print(p)
    # return o

def getharm0():
    harm = ['物理危害', '化学危害', '生物危害']
    harm0_1 = {'物理危害': ['机械危害', '爆炸危害', '噪声危害', '电气危害', '高/低温物质危害', '辐射危害', '警示标识缺失'], '化学危害': ['无机毒物危害', '有机毒物'],
               '生物危害': ['致病微生物危害', '致病生物危害']}
    harm1_2 = {'机械危害': ['形状和表面性能危害', '潜在能量危害', '动能危害'], '爆炸危害': ['气相爆炸危害', '液相爆炸危害', '固相爆炸危害'],
               '噪声危害': ['稳定性噪音危害', '变动性噪音危害', '脉冲性噪音危害'], '电气危害': ['触电危害', '电气爆炸'], '高/低温物质危害': ['高温物质危害', '低温物质危害'],
               '辐射危害': ['热辐射危害', '射线辐射危害', '电磁辐射危害'], '警示标识缺失': ['警示标识缺失'],
               '无机毒物危害': ['有毒气体危害', '有毒重金属及其化合物危害', '有毒酸碱类危害', '无机氰化物危害'],
               '有机毒物': ['有毒荃类化合物', '有毒芳香稠环类化合物', '有毒杂环类化合物', '有毒有机氯化物'],
               '致病微生物危害': ['原核细胞微生物危害', '真核细胞微生物危害', '原生微生物危害'], '致病生物危害': ['寄生虫危害']}
    harm1 = []
    for p in harm:
        for j in harm0_1[p]:
            harm1.append(j)
    print(harm1)

    harm2 = []
    for p in harm1:
        for j in harm1_2[p]:
            harm2.append(j)
    print(harm2)


if __name__ == '__main__':
    # p = ['危害类型', '消费者', '环境']
    # h = getharm0()
    # c = getconsumer()
    # e = getenv()
    # a1 = {'value': '小零件', 'label': '小零件'}
    # a2 = {'value': '涉及的消费品数量', 'label': '涉及的消费品数量'}
    # end = [h, a1, a2]
    # print(end)
    dict1 = {'划伤': 1, '挫伤': 2, '勒伤': 3, '弹伤': 4, '砸伤': 5, '扭伤': 6, '挤压伤': 7, '骨折': 8, '内脏损伤或破裂': 9, '肢体离断': 10,
            '切割伤': 11, '穿刺伤': 12, '窒息': 13, '体内异物': 14, '烧伤': 15, '烫伤': 16, '电击伤': 17, '电热灼伤': 18, '视力损伤': 19,
            '心血管系统损伤': 20, '生殖系统损伤': 21, '听力损伤': 22, '心脏血管损伤': 23, '内部器官损伤': 24, '爆炸损伤': 25, '植物人': 26, '死亡': 27,
            '化学性刺激': 28, '过敏反应': 29, '全身中毒': 30, '致癌': 31, '致畸': 32, '生物性感染': 33, '环境风险': 34, '脑震荡': 35, '脑挫裂伤': 36,
            '其他': 37}
    dict2 = {}
    for p in dict1:
        dict2.update({dict1[p]: p})
    print(dict2)
